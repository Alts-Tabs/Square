plugins {
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'java'
}

group   = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    jjwtVersion = '0.11.5'
}

dependencies {
    /* ────── Core Spring ────── */
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'       // MVC
    implementation 'org.springframework.boot:spring-boot-starter-webflux'   // Reactive
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'com.fasterxml.jackson.core:jackson-databind'// JSON 처리

    /* ────── JSON / JWT ────── */
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.jsoup:jsoup:1.17.2'

    /* ────── NCP Bucket ────── */
    implementation group: 'io.awspring.cloud', name: 'spring-cloud-starter-aws', version: '2.4.4'
    implementation group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.416'

    /* ────── Lombok & DevTools ────── */
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    /* ────── Databases ────── */
    runtimeOnly 'com.mysql:mysql-connector-j'  // prod

    /* ────── Testing ────── */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly    'org.junit.platform:junit-platform-launcher'

    /* ────── tossPayments ────── */
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

/////////////////////////////////////////////////////////////////
//                       React 빌드 파이프라인
/////////////////////////////////////////////////////////////////

def reactAppDir = "$projectDir/src/main/squarereact"

processResources {
    dependsOn "copyReactFile"
}

task copyReactFile(type: Copy) {
    dependsOn "buildReact"
    from "$reactAppDir/build"
    into "$projectDir/src/main/resources/static/"
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$reactAppDir"
    inputs.dir "$reactAppDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task installReact(type: Exec) {
    workingDir "$reactAppDir"
    inputs.dir "$reactAppDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "audit", "fix"
        commandLine "npm", "install"
    }
}
